
from beaker.middleware import SessionMiddleware
import bottle
from bottle import abort, route, static_file, run, view, request
from bottle import debug as bottle_debug
from collections import defaultdict
from datetime import datetime
from pymongo import Connection
from sys import exit
from time import time, sleep, localtime

from confreader import ConfReader
#import mailer
from core import Alert, Users, clean
from dbconnector import DB
#from flmap import draw_png_map, draw_svg_map
#from flutils import flag, extract_all, get_rss_channels

from argparse import ArgumentParser

from bottle import HTTPResponse, HTTPError

import logging
logging.debug('starting')
log = logging.getLogger(__name__)

db = None

def say(s, level=None):
        print s

def ack(s=None):
    """Acknowledge successful processing and returns ajax confirmation."""
    if s:
        say(s, level="success")
    return {'ok': True}

def ret_warn(s=None):
    """Generate warn message and returns ajax 'ok: False'."""
    if s:
        say(s, level="warning")
    return {'ok': False}

def ret_alert(s=None):
    """Generate alert message and returns ajax 'ok: False'."""
    if s:
        say(s, level="alert")
    return {'ok': False}

def pg(name, default=''):
    """Retrieve an element from a POST request"""
    s = request.POST.get(name, default)[:64]
    return clean(s).strip()

def pg_list(name, default=''):
    """Retrieve a serialized (comma-separated) list from a POST request.
    Duplicated elements are removed"""
    # FIXME: a hostgroup containing hundreds of hosts may exceed POST size
    s = request.POST.get(name, default)
    li = clean(s).strip().split(',')
    return list(set(li))

def int_pg(name, default=None):
    """Retrieve an element from a POST request and returns it as an integer"""
    v = request.POST.get(name, default)
    if v == '':
        return None
    try:
        return int(v)
    except:
        raise Exception, "Expected int as POST parameter, got string: '%s'." % v

def pcheckbox(name):
    """Retrieve a checkbox status from a POST request generated by serializeArray() and returns '0' or '1' """
    if name in request.POST:
        return '1'
    return '0'



# # #  web services  # # #


# #  authentication  # #

def _require(role='readonly'):
    """Ensure the user has the required role (or higher).
    Order is: admin > editor > readonly
    """
    m = {'admin': 15, 'editor': 10, 'readonly': 5}
    s = bottle.request.environ.get('beaker.session')
    if not s:
        say("User needs to be authenticated.", level="warning")
        #TODO: not really explanatory in a multiuser session.
        raise Alert, "User needs to be authenticated."
    myrole = s.get('role', None)
    if not myrole:
        raise Alert, "User needs to be authenticated."
    if m[myrole] >= m[role]:
        return
    say("An account with '%s' level or higher is required." % repr(role))
    raise Exception

@bottle.route('/login', method='POST')
def login():
    """ """
    s = bottle.request.environ.get('beaker.session')
    if 'username' in s:  # user is authenticated <--> username is set
        say("Already logged in as \"%s\"." % s['username'])
        return {'logged_in': True}
    user = pg('user', '')
    pwd = pg('pwd', '')
    try:
        users.validate(user, pwd)
        role = users._users[user][0]
        say("User %s with role %s logged in." % (user, role), level="success")
        s['username'] = user
        s['role'] = role
        s = bottle.request.environ.get('beaker.session')
        s.save()
        bottle.redirect('')
    except (Alert, AssertionError), e:
        say("Login denied for \"%s\": %s" % (user, e), level="warning")
        log.debug("Login denied for \"%s\": %s" % (user, e))
        bottle.redirect('')

@bottle.route('/logout')
def logout():
    s = bottle.request.environ.get('beaker.session')
    u = s.get('username', None)
    if u:
        say('User %s logged out.' % u)
    s.delete()
    bottle.redirect('')


@bottle.route('/')
@view('index')
def index():
    s = bottle.request.environ.get('beaker.session')
    logged_in = True if s and 'username' in s else False

    try:
        title = conf.title
    except:
        title = 'test'
    return dict(msg=None, title=title, logged_in=logged_in)

# #  tables interaction  # #
#
# GETs are used to list all table contents
# POSTs are used to make changes or to populate editing forms
# POST "verbs" are sent using the "action" key, and the "rid" key
# specifies the target:
#   - delete
#   - moveup/movedown/enable/disable   see ruleset()
#   - edit: updates an element if rid is not null, otherwise creates
#             a new one

@bottle.route('/logs')
@view('logs')
def logs():
    _require()
    logs = db.logs.find()
    try:
        print logs.count()
        return dict(logs=logs)
    except Exception, e:
        print e
        return {}


@bottle.route('/incoming')
@view('incoming')
def incoming():
    _require()
    logs = db.incoming.find()
    return dict(logs=logs)


@bottle.route('/rules')
@view('rules')
def rules():
    _require()
    rules = db.rules.find()
    keys =  (
        'id',
        'program' ,
        'son' ,
        'author' ,
        'modify_date' ,
        'score',
        'revision' ,
        'rule' ,
        'level' ,
        'host' ,
        'rule_type' ,
        'event_type'
    )
    return dict(rules=rules, keys=keys)



# serving static files

@bottle.route('/static/:filename#[a-zA-Z0-9_\.?\/?]+#')
def static(filename):
    _require()
    bottle.response.headers['Cache-Control'] = 'max-age=3600, public'
    if filename == '/jquery-ui.js':
        return static_file('jquery-ui/jquery-ui.js',
            '/usr/share/javascript/') #TODO: support other distros
    elif filename == 'jquery.min.js':
        return static_file('jquery/jquery.min.js', '/usr/share/javascript/')
    elif filename == 'jquery-ui.custom.css': #TODO: support version change
        return static_file('jquery-ui/css/smoothness/jquery-ui-1.7.2.custom.css',
            '/usr/share/javascript/')
    else:
        return static_file(filename, 'static')


@bottle.route('/favicon.ico')
def favicon():
    static_file('favicon.ico', 'static')


# end of web services


# main

def main():
    global conf
    global db

    parser = ArgumentParser(description='Logaar daemon')
    parser.add_argument('-d', '--debug', action='store_true', help='debug mode')
    parser.add_argument('-c', '--cf',  nargs='?',
        default = 'logaar.ini', help='configuration file')
    parser.add_argument('-r', '--repodir',  nargs='?',
        help='repository directory')
    args = parser.parse_args()

    try:
        conf = ConfReader(fn=args.cf)
    except Exception, e:
        log.error("Exception %s while reading configuration file '%s'" % (e, args.cf))
        exit(1)

    if args.repodir:
        conf.data_dir = args.repodir

    # Setting up DB connectivity
    db = DB()
    #TODO DB(host=...)

    # logging

    if args.debug:
        debug_mode = True
#        log.basicConfig(level=log.DEBUG,
#                        format='%(asctime)s %(levelname)-8s %(message)s',
#                        datefmt='%a, %d %b %Y %H:%M:%S')
        log.debug("Debug mode")
        log.debug("Configuration file: '%s'" % args.cf)
        bottle.debug(True)
        say("Logaar started in debug mode.", level="success")
        bottle_debug(True)
        reload = True
    else:
        debug_mode = False
#        log.basicConfig(level=log.INFO,
#                    format='%(asctime)s %(levelname)-8s %(message)s',
#                    datefmt='%a, %d %b %Y %H:%M:%S',
#                    filename=conf.logfile,
#                    filemode='w')
        reload = False
        say("Logaar started.", level="success")

    globals()['users'] = Users(d=conf.data_dir)

    session_opts = {
        'session.type': 'cookie',
        'session.validate_key': True,
    }
    app = bottle.default_app()
    app = SessionMiddleware(app, session_opts)

    run(app=app, host=conf.listen_address, port=conf.listen_port, reloader=reload)







if __name__ == "__main__":
        main()

